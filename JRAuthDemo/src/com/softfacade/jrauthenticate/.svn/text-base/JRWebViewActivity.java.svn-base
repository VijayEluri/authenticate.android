package com.softfacade.jrauthenticate;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpRequest;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

import com.softfacade.noah.R;

import android.app.Activity;
import android.app.AlertDialog;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Message;
import android.util.Log;
import android.view.Window;
import android.webkit.SslErrorHandler;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.net.http.SslError;

public class JRWebViewActivity extends Activity  {
	
	private WebView mWebView;
	private JRSessionData sessionData;
	private JRAuthenticate jrAuth;
	
	public String startURL = null;
	public String token = null;
	public String device = null;
	
	@Override
    public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		getWindow().requestFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
        //getWindow().requestFeature(Window.FEATURE_PROGRESS);
		
		setContentView(R.layout.jr_webview_activity);
		
		jrAuth = JRAuthenticate.jrAuthenticate();
		jrAuth.jrModalNavController.webView = this;
		jrAuth.jrModalNavController.whichIsActive = 0;
		sessionData = jrAuth.sessionData;
		
		mWebView = (WebView) findViewById(R.id.webview);
	    mWebView.getSettings().setJavaScriptEnabled(true);
	   	mWebView.addJavascriptInterface(new JRJavaScriptInterface(), "HTMLOUT");
	    
	    mWebView.setWebViewClient(new MyWebClient());
	    startURL = sessionData.startURL();
	    mWebView.loadUrl(startURL);
	    setProgressBarIndeterminateVisibility(true);
    	//setProgressBarVisibility(true);
		//setResult(RESULT_OK, (new Intent()).putExtra("tags", selectedTags));
        //finish();
	}
	
	@Override
    public void onResume() {
		super.onResume();
	}
	
	@Override
    public void onPause() {
		super.onPause();
	}

	
	/* An instance of this class will be registered as a JavaScript interface */
	class JRJavaScriptInterface implements JRConnectionManagerDelegate
	{
	    public void showHTML(String html)
	    {
	    	int start = html.indexOf("name=\"token\"");
	    	if (start == -1) return;
	    	int tokenIndex = html.indexOf("value=\"", start);
	    	int end = html.indexOf("\">", tokenIndex);
	    	token = html.substring(tokenIndex+7, end);
	    	
	    	start = html.indexOf("name=\"device\"");
	    	int deviceIndex = html.indexOf("value=\"", start);
	    	end = html.indexOf("\">", deviceIndex);
	    	device = html.substring(deviceIndex+7, end);
	    	
	    	start = html.indexOf("action=\"");
	    	end = html.indexOf("\"", start+8);
	    	String url = html.substring(start+8, end);
	    	String tag = "rpx_result";
			
			HttpPost httppost = new HttpPost(url.replaceFirst("s", ""));
			List<NameValuePair> pairs = new ArrayList<NameValuePair>();
			pairs.add(new BasicNameValuePair("token", token));
			pairs.add(new BasicNameValuePair("device", device));
			try {
				httppost.setEntity(new UrlEncodedFormEntity(pairs));
			} catch (UnsupportedEncodingException e) {
			}
							
			JRConnectionManager.getInstance().createConnectionFromRequest(httppost, this, tag);
			setProgressBarIndeterminateVisibility(true);
	    	//setProgressBarVisibility(true);
			
	    }
	    
	    @Override
		public void connectionDidFinishLoadingWithPayload(String payload,
				HttpRequest request, HttpClient client, String tag) {
	    	setProgressBarIndeterminateVisibility(false);
	    	//setProgressBarVisibility(false);
			if (tag.equals("rpx_result")) {
				
				JSONObject jObject = null;
				JSONTokener tokener = new JSONTokener(payload);
				try {
					jObject = new JSONObject(tokener);
					JSONObject jRpxResult = jObject.getJSONObject("rpx_result");
					
					if (jRpxResult.getString("stat").equals("ok")){
						sessionData.authenticationDidCompleteWithToken(jRpxResult.getString("token"));
					} else {
						String error = jRpxResult.getString("error");
						if (error.equals("Discovery failed for the OpenID you entered")) {
							String message = null;
							if (sessionData.currentProvider.getProviderRequiresInput())
								message = "The " + sessionData.currentProvider.getShortText() + " you entered was not valid. Please try again.";
							else
								message = "There was a problem authenticating with this provider. Please try again.";
							new AlertDialog.Builder(JRWebViewActivity.this)
				            .setTitle("Invalid Input")
				            .setMessage(message)
				            .setNegativeButton(android.R.string.ok, null)
				        .setCancelable(false)
				        .create()
				        .show();
						} else if (error.equals("Please enter your OpenID")) {
							Error err = new Error("Authentication failed: " + payload);
							sessionData.authenticationDidFailWithError(err);
						} else {
							Error err = new Error("Authentication failed: " + payload);
							sessionData.authenticationDidFailWithError(err);
						}
					}
				} catch (IllegalStateException e) {
					Log.e("", e.getMessage());
				} catch (JSONException e) {
					Log.e("", e.getMessage());
				}
			}
	    }
				/*new AlertDialog.Builder(JRWebViewActivity.this)
		            .setTitle("rpx_result")
		            .setMessage(payload)
		            .setPositiveButton(android.R.string.ok, null)
		        .setCancelable(false)
		        .create()
		        .show();*/

		@Override
		public void connectionDidFailWithError(Error error,
				HttpRequest request, String tag) {
			setProgressBarIndeterminateVisibility(false);
	    	//setProgressBarVisibility(false);
			if (tag.equals("rpx_result")) {
				sessionData.authenticationDidFailWithError(error);
			}
		}

		@Override
		public void connectionWasStoppedWithTag(String tag) {

		}
	}
	
	private class MyWebClient extends WebViewClient {

		
		/*@Override
		public boolean shouldOverrideUrlLoading (WebView view, String urlConection){
			URL url;
			HttpsURLConnection httpsCon;
			URLConnection con;
			InputStream inputStream;
			
			String thatURL = jrAuth.theBaseUrl + "/signin/device";
			if (urlConection.indexOf(thatURL) != -1){
				String tag = "rpx_result";
				
				HttpGet httpget = new HttpGet(urlConection);
				
				JRConnectionManager.createConnectionFromRequest(httpget, this, tag);
				return true;
			}
			
			try {
				url = new URL(urlConection);
				if (urlConection.indexOf("https://") != -1) {
					httpsCon = (HttpsURLConnection) url.openConnection();
					httpsCon.setConnectTimeout(3000);
					//httpsCon.connect();
					inputStream = httpsCon.getInputStream();
					
				} else {
					con = url.openConnection();
					con.setConnectTimeout(3000);
					//con.connect();
					inputStream = con.getInputStream();
				}
				
				String htmlContent = convertToString(inputStream);
				view.loadDataWithBaseURL(urlConection, htmlContent, "text/html", "utf-8", null);
				
			} catch (MalformedURLException e) {
				Log.e("", e.getMessage());
			} catch (IOException e) {
				Log.e("", e.getMessage());
			}
			return false;
		}*/
				 
		/*public String convertToString(InputStream inputStream){
			StringBuffer string = new StringBuffer();
			BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
			String line;
			try {
				while ((line = reader.readLine()) != null) {
					string.append(line + "\n");
				}
			} catch (IOException e) {}
			return string.toString();
		}*/
		
		@Override
		public void onReceivedSslError (WebView view, SslErrorHandler handler, SslError error) {
			handler.proceed() ;
		}
		
		@Override
		public void onPageStarted(WebView view, String url, Bitmap favicon) {
			String thatURL = jrAuth.theBaseUrl + "/signin/device";
			if (url.indexOf(thatURL) != -1){
				return;
			}
			super.onPageStarted(view, url, favicon);
			setProgressBarIndeterminateVisibility(true);
	    	//setProgressBarVisibility(true);
		}
		
		@Override
		public void onPageFinished(WebView view, String url) {
			super.onPageFinished(view, url);
			int index = startURL.indexOf("start");
			if (index != -1) {
				String finishURL = startURL.substring(0, index);
				if (url.indexOf(finishURL) != -1) {
					view.loadUrl("javascript:window.HTMLOUT.showHTML('<head>'+document.getElementsByTagName('html')[0].innerHTML+'</head>');");
					setProgressBarIndeterminateVisibility(true);
			    	//setProgressBarVisibility(true);
			    	return;
				}
			}
			setProgressBarIndeterminateVisibility(false);
	    	//setProgressBarVisibility(false);
		}
		
		@Override
		public void onFormResubmission(WebView view, Message dontResend, Message resend) {
			super.onFormResubmission(view, dontResend, resend);
		}

	}
}
