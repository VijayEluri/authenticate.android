package com.softfacade.jrauthenticate;

public interface JRAuthenticateDelegate {
	
	/**
	* These messages are both sent to any JRAuthenticateDelegates after the library has received the
	* token and before the library posts the token to the token URL. When this event occurs, the
	* library closes the modal dialog, so you may want to capture this moment so that you can update
	* you UI. You may implement neither or both, but the only difference between the two is that the
	* second one includes the provider the user is authenticating with (the first one was left for
	* backwards compatibility). If you instantiate the library with a token URL, authentication is
	* completed automatically, and you won't need the token for anything. As tokens are only valid for
	* a small amount of time, do not persist this value.
	*/
	void jrAuthenticate(JRAuthenticate jrAuth, String didReceiveToken);
	void jrAuthenticate(JRAuthenticate jrAuth, String didReceiveToken, String forProvider);
	/**
	* This message is sent to any JRAuthenticateDelegates after the library has posted the token to the token URL
	* and received a response from the token URL. This event completes authentication and the response is passed
	* along to the application in the tokenURLPayload. The content of this response is dependent on the implementation
	* of the token URL and application, but should contain any information required by the application, such as the
	* user's profile, session cookies, etc.
	*/
	void jrAuthenticateReachToken(JRAuthenticate jrAuth, String didReachTokenURL, String withPayload);
	/**
	* The following messages are sent when authentication failed (not canceled) for any reason.
	*/
	void jrAuthenticate(JRAuthenticate jrAuth, Error error);
	void jrAuthenticate(JRAuthenticate jrAuth, String callToTokenURL, Error didFailWithError);
	
	/**
	* This message is sent if the authorization was canceled for any reason other than an error. For example,
	* the user hits the "Cancel" button, or any class (including the JRAuthenticate delegate) calls the
	* cancelAuthentication message.
	*/
	void jrAuthenticateDidNotCompleteAuthentication(JRAuthenticate jrAuth);
}
